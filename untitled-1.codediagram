{"id":-1,"name":"Onboarding diagram","userId":-1,"createdAt":"","updatedAt":"","content":{"items":[{"uid":"dcC-n0bUXU","position":{"x":-660,"y":-850},"sizes":{"width":400,"height":10776.1875},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Firebase\\app\\src\\main\\java\\github\\yvesbenabou\\firebase\\MainActivity.java"}]},{"type":"codeBlock","attrs":{"language":"java","wrapCode":true},"content":[{"type":"text","text":"package github.yvesbenabou.firebase;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.text.Editable;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\n//Flo boutton etage\r\nimport android.view.MotionEvent;\r\nimport android.widget.Button;\r\n\r\n//Flo boutton info\r\nimport android.os.Handler;\r\n\r\n// Flo images svg zoom (reste déjà import)\r\nimport android.view.ScaleGestureDetector;\r\n\r\n//Nico synchro de la base de données avec ADE\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Collection;\r\nimport java.util.Date;\r\n\r\n//Nico horloge\r\nimport android.app.TimePickerDialog;\r\nimport android.widget.TimePicker;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.TimeZone;\r\n\r\nimport android.text.TextWatcher;\r\n\r\nimport github.yvesbenabou.firebase.libs.CalendarFetcher;\r\nimport github.yvesbenabou.firebase.libs.Salle;\r\n\r\npublic class MainActivity extends AppCompatActivity implements Database_Out {\r\n    private final String floors = \"étages\";\r\n    private TextView selectedTimeTextView;\r\n    private DoorButton db;\r\n    private final String reservation = \"Réservations\";\r\n    String TAG = \"MainActivity\";\r\n    String room = \"\";\r\n\r\n    //Flo boutton etage\r\n    private ImageView backgroundImage;\r\n    private int[] imageResources = {\r\n            R.drawable.school_map0,\r\n            R.drawable.school_map1,\r\n            R.drawable.school_map2,\r\n            R.drawable.school_map3,\r\n            R.drawable.school_map4\r\n    };\r\n\r\n    private int currentIndex = 1;\r\n    private float initialY;\r\n\r\n    // Flo bouton info\r\n    private ImageView infoImage;\r\n    private Handler handler = new Handler();\r\n\r\n    // Flo images svg zoom\r\n    private ScaleGestureDetector scaleGestureDetector;\r\n    private float scaleFactor = 1.0f;  // Facteur de zoom initial\r\n\r\n    @Override protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        FirebaseDatabase.getInstance().setPersistenceEnabled(true);\r\n\r\n        //txt = (TextView) findViewById(R.id.text);\r\n\r\n        this.db = findViewById(R.id.doorbutton);\r\n        this.db.setup((ImageView) findViewById(R.id.takeroombubble),\r\n                findViewById(R.id.confirmroombutton),\r\n                findViewById(R.id.cancelbutton),\r\n                findViewById(R.id.modifybutton),\r\n                findViewById(R.id.selected_time_textview),\r\n                findViewById(R.id.salle_input));\r\n        this.db.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // On Click\r\n                // Write data to Firebase Database\r\n                MainActivity.this.db.show();\r\n            }\r\n        });\r\n\r\n        final DatabaseReference databaseRef = FirebaseDatabase.getInstance().getReference();\r\n\r\n        ConfirmRoomButton crb = findViewById(R.id.confirmroombutton);\r\n        crb.setup(this.db);  // setup the confirm button so that it can call the hide function of the DoorButton when clicked\r\n        crb.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // On Click\r\n                // Write data to Firebase Database\r\n                String room = crb.getRoom();\r\n                crb.take_room();\r\n                databaseRef.child(reservation).child(floors).child(String.valueOf(room.charAt(1))).child(room).setValue(selectedTimeTextView.getText());\r\n                crb.hide();\r\n            }\r\n        });\r\n\r\n        //final DatabaseReference databaseRef = FirebaseDatabase.getInstance().getReference();  // and if you explicit the project name with full URL, you get an exception with forbidden characters!\r\n\r\n        CancelButton cb = findViewById(R.id.cancelbutton);\r\n        cb.setup(db);  // setup the cancel button so that it can call the hide function of the DoorButton when clicked\r\n        cb.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // On Click\r\n                cb.hide();\r\n            }\r\n        });\r\n\r\n        // Read data from Firebase Database\r\n        databaseRef.child(floors).addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(DataSnapshot dataSnapshot) {\r\n                //txt.setText(dataSnapshot.getValue().toString());\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(DatabaseError databaseError) {\r\n                // Getting Post failed, log a message\r\n                Log.w(TAG, \"onCancelled\", databaseError.toException());\r\n            }\r\n        });\r\n\r\n\r\n        //Flo boutton etage\r\n        backgroundImage = findViewById(R.id.backgroundImage);\r\n        Button slideButton = findViewById(R.id.slideButton);\r\n\r\n        // Initialiser l'affichage du texte du bouton avec le numéro d'image\r\n        slideButton.setText(String.valueOf(currentIndex));\r\n\r\n        slideButton.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                switch (event.getAction()) {\r\n                    case MotionEvent.ACTION_DOWN:\r\n                        initialY = event.getY(); // Enregistre la position initiale du toucher\r\n                        return true;\r\n                    case MotionEvent.ACTION_UP:\r\n                        float finalY = event.getY(); // Position finale du toucher\r\n                        if (initialY - finalY > 100) {\r\n                            // Glissement vers le haut : image suivante\r\n                            currentIndex = (currentIndex + 1) % imageResources.length;\r\n                        } else if (finalY - initialY > 100) {\r\n                            // Glissement vers le bas : image précédente\r\n                            currentIndex = (currentIndex - 1 + imageResources.length) % imageResources.length;\r\n                        }\r\n                        // Mettre à jour l'image et le texte du bouton\r\n                        backgroundImage.setImageResource(imageResources[currentIndex]);\r\n                        slideButton.setText(String.valueOf(currentIndex));\r\n                        return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        //Flo boutton info\r\n        Button helpButton = findViewById(R.id.helpButton);\r\n        infoImage = findViewById(R.id.infoImage);\r\n\r\n        helpButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Afficher l'image\r\n                infoImage.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n\r\n        // Flo images svg zoom\r\n        backgroundImage = findViewById(R.id.backgroundImage);\r\n        backgroundImage.setImageResource(R.drawable.school_map1); // Assurez-vous que c'est un VectorDrawable\r\n\r\n        // Initialisation du ScaleGestureDetector\r\n        scaleGestureDetector = new ScaleGestureDetector(this, new ScaleListener());\r\n\r\n        // Appliquer un OnTouchListener pour détecter le zoom\r\n        backgroundImage.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                scaleGestureDetector.onTouchEvent(event);  // Passe les événements au ScaleGestureDetector\r\n                return true;\r\n            }\r\n        });\r\n        // ADE\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.set(2024, Calendar.NOVEMBER, 25, 8, 30);  // 25 novembre 2023, 8h30\r\n        Date targetDate = calendar.getTime();\r\n\r\n        // Lancer le fetcher de calendrier\r\n        new CalendarFetcher(targetDate).execute();\r\n\r\n        ModifyButton modifyTimeButton = findViewById(R.id.modifybutton);\r\n        selectedTimeTextView = findViewById(R.id.selected_time_textview);\r\n\r\n        // Définir un listener pour ouvrir le TimePickerDialog\r\n        modifyTimeButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                showTimePickerDialog();\r\n            }\r\n        });\r\n\r\n        EditText salleInput = findViewById(R.id.salle_input);\r\n        salleInput.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                salleInput.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n\r\n        salleInput.addTextChangedListener(new TextWatcher() {\r\n            private boolean isUpdating = false;\r\n\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                // Rien à faire ici\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                if (isUpdating) return; // Empêche les boucles infinies\r\n\r\n                // Supprime les espaces et vérifie si la chaîne est valide\r\n                String salle = s.toString().trim().replace(\" \", \"\");\r\n\r\n                if (salle.isEmpty()) {\r\n                    Log.d(\"Firebase\", \"Chaîne vide, aucune vérification effectuée.\");\r\n                    return; // Pas de vérification si l'entrée est vide\r\n                }\r\n\r\n                // Vérifie que la chaîne est suffisamment longue\r\n                if (salle.length() < 4) {\r\n                    Log.d(\"Firebase\", \"Nom de salle trop court.\");\r\n                    return; // La salle doit être au moins de 4 caractères (comme 1003)\r\n                }\r\n\r\n                // Extraire l'étage à partir du premier caractère\r\n                String etage = \"0\"; // Étages comme dans votre exemple\r\n                String salleComplete = salle;\r\n\r\n                // Référence Firebase\r\n                DatabaseReference salleRef = databaseRef.child(\"étages\").child(etage).child(salleComplete);\r\n\r\n                // Ajout du Listener\r\n                salleRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(DataSnapshot dataSnapshot) {\r\n                        if (dataSnapshot.exists()) {\r\n                            // Salle trouvée\r\n                            Log.d(\"Firebase\", \"Salle \" + salleComplete + \" trouvée dans l'étage \" + etage);\r\n                            MainActivity.this.db.salleFound(); // Appel d'une méthode personnalisée\r\n                            crb.setRoom(salleComplete);\r\n                        } else {\r\n                            // Salle non trouvée\r\n                            Log.d(\"Firebase\", \"Salle \" + salleComplete + \" introuvable dans l'étage \" + etage);\r\n                            db.notFound(); // Appel d'une méthode personnalisée\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(DatabaseError databaseError) {\r\n                        Log.e(\"Firebase\", \"Erreur : \" + databaseError.getMessage());\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n                // Rien à faire ici\r\n            }\r\n        });\r\n\r\n        ImageView backgroundImage = findViewById(R.id.backgroundImage);\r\n        ImageView takeroombubble = findViewById(R.id.takeroombubble);\r\n\r\n        backgroundImage.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View view, MotionEvent event) {\r\n                boolean info = (infoImage.getVisibility() == View.VISIBLE);\r\n                boolean reservation = (takeroombubble.getVisibility() == View.VISIBLE);\r\n                if (info || reservation) {\r\n                    // Log pour voir si l'événement tactile est détecté\r\n                    Log.d(\"TouchEvent\", \"Touch event detected\");\r\n\r\n                    if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                        Log.d(\"TouchEvent\", \"Action down detected\");\r\n\r\n                        // Coordonnées du touch\r\n                        float touchX = event.getX();\r\n                        float touchY = event.getY();\r\n                        Log.d(\"TouchEvent\", \"Touch coordinates: \" + touchX + \", \" + touchY);\r\n\r\n                        // Récupérer les dimensions et position de l'ImageView\r\n                        int[] infoCoords = new int[2];\r\n                        infoImage.getLocationInWindow(infoCoords);\r\n\r\n                        int imageLeft = infoCoords[0];\r\n                        int imageTop = infoCoords[1];\r\n                        int imageRight = imageLeft + infoImage.getWidth();\r\n                        int imageBottom = imageTop + infoImage.getHeight();\r\n\r\n                        Log.d(\"TouchEvent\", \"Image bounds: \" + imageLeft + \", \" + imageTop + \", \" + imageRight + \", \" + imageBottom);\r\n\r\n                        // Vérifier si le touch est en dehors\r\n                        if (touchX < imageLeft || touchX > imageRight ||\r\n                                touchY < imageTop || touchY > imageBottom) {\r\n                            infoImage.setVisibility(View.GONE);\r\n                        }\r\n\r\n                        takeroombubble.getLocationInWindow(infoCoords);\r\n\r\n                        imageLeft = infoCoords[0];\r\n                        imageTop = infoCoords[1];\r\n                        imageRight = imageLeft + takeroombubble.getWidth();\r\n                        imageBottom = imageTop + takeroombubble.getHeight();\r\n\r\n                        if (touchX < imageLeft || touchX > imageRight ||\r\n                                touchY < imageTop || touchY > imageBottom) {\r\n                            cb.hide();\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n\r\n        final SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm\");\r\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Paris\"));\r\n        Log.d(TAG, \"Date actuelle : \" + dateFormat.format(new Date()));\r\n    }\r\n\r\n    // Classe interne pour gérer les événements de zoom\r\n    // Sert pour le ScaleListener du zoom\r\n    private class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\r\n        @Override\r\n        public boolean onScale(ScaleGestureDetector detector) {\r\n            scaleFactor *= detector.getScaleFactor();  // Augmenter ou réduire le facteur de zoom en fonction du geste\r\n            scaleFactor = Math.max(0.5f, Math.min(scaleFactor, 3.0f));  // Limite le zoom entre 0.5x et 3x\r\n            backgroundImage.setScaleX(scaleFactor);  // Applique le zoom en X\r\n            backgroundImage.setScaleY(scaleFactor);  // Applique le zoom en Y\r\n            return true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n        //cette fonction sera appelée toutes les 15 mins pour resynchroniser avec ADE\r\n\r\n    }\r\n\r\n    private void showTimePickerDialog() {\r\n        // Obtenez l'heure actuelle pour l'initialiser dans le TimePicker\r\n        Calendar calendar = Calendar.getInstance();\r\n        int hour = calendar.get(Calendar.HOUR_OF_DAY);\r\n        int minute = calendar.get(Calendar.MINUTE);\r\n\r\n        // Créez et affichez le TimePickerDialog\r\n        TimePickerDialog timePickerDialog = new TimePickerDialog(\r\n                MainActivity.this,\r\n                new TimePickerDialog.OnTimeSetListener() {\r\n                    @Override\r\n                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {\r\n                        // Récupérez l'heure sélectionnée et l'affichez\r\n                        String selectedTime = String.format(\"%02d:%02d\", hourOfDay, minute);\r\n                        if(MainActivity.this.db.verify(selectedTime))  selectedTimeTextView.setText(selectedTime);\r\n                    }\r\n                },\r\n                hour, minute, true  // Le dernier paramètre `true` signifie un format 24h\r\n        );\r\n        timePickerDialog.show();\r\n    }\r\n\r\n    public static class Liste_Salles {\r\n\r\n        HashMap<String, Salle> List;\r\n\r\n        public Liste_Salles() {\r\n            List = new HashMap<>();\r\n        }\r\n\r\n        public Collection<Salle> getList() {\r\n            return List.values();\r\n        }\r\n\r\n        public Salle getSalle(String num) {\r\n            return List.get(num);\r\n        }\r\n        public void setSalle(Salle newSalle) {\r\n            List.put(newSalle.getNum(), newSalle);\r\n        }\r\n\r\n        public Collection<String> getSallesSet() {\r\n            return List.keySet();\r\n        }\r\n\r\n        public boolean containsSalle(String numSalle) {\r\n            for (Salle salle : this.getList()) {\r\n                if (salle.getNum().equals(numSalle)) return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n    }\r\n}"}]}]},"nodeType":"block"},{"uid":"0xVBajDuvj","position":{"x":20,"y":-130},"sizes":{"width":400,"height":1250},"autoheight":false,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Firebase\\app\\src\\main\\java\\github\\yvesbenabou\\firebase\\getAdeDatas.java"}]},{"type":"codeBlock","attrs":{"language":"java","wrapCode":true},"content":[{"type":"text","text":"package github.yvesbenabou.firebase;\r\nimport android.util.Log;\r\nimport github.yvesbenabou.firebase.libs.*;\r\n\r\npublic class getAdeDatas extends MainActivity{\r\n    String pageSource;\r\n\r\n    public MainActivity.Liste_Salles getAdeData(String time) {\r\n\r\n        /*\r\n        TODO : time format\r\n        time = \"JJMMAAAA,hh:mm\"\r\n         */\r\n        MainActivity.Liste_Salles adeDatas = new MainActivity.Liste_Salles();\r\n\r\n        String username = \"lecteur1\"; // Remplacez par votre nom d'utilisateur\r\n        String password = \"\"; // Remplacez par votre mot de passe\r\n        String year = \"2024-2025-ESIEE PARIS\"; // Remplacez par l'année que vous souhaitez sélectionner\r\n\r\n        //CalendarFetcher.updateRoomStates();\r\n\r\n        // Récupérer le code source de la page\r\n        /*\r\n        WebPageSourceFetcherWebView webViewFetcher = new WebPageSourceFetcherWebView();\r\n        webViewFetcher.setHtmlFetchListener(new WebPageSourceFetcherWebView.HtmlFetchListener() {\r\n            @Override\r\n            public void onHtmlFetched(String html) {\r\n                // html contient le code source de la page\r\n                // Log.d(\"HTML Content\", html);\r\n                pageSource = html;\r\n            }\r\n        });\r\n        */\r\n\r\n        //Traitement des données html :\r\n\r\n        //adeDatas = parseHtmlDatas.parsing(pageSource, time);\r\n\r\n        // Afficher le code source\r\n        //System.out.println(\"Code source de la page :\");\r\n        //System.out.println(pageSource);\r\n\r\n        for (Salle s : adeDatas.getList()) {\r\n            System.out.println(\"Salle : \" + s.getNum()+ \" state : \"+ s.getState() );\r\n        }\r\n\r\n        return adeDatas;\r\n    }\r\n}\r\n"}]}]},"nodeType":"block"}],"configs":{"centerX":306.00510932224404,"centerY":544.2667408038255,"zoomLevel":0.39},"arrowData":{"arrowsMap":{"arrow-point-bI0wBh3Ufk-bottom-point-PSPLIYKa9J-top":{"to":"point-PSPLIYKa9J-top","from":"point-bI0wBh3Ufk-bottom","label":"Normal Box","direction":"ft","selectable":true},"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top":{"to":"point-ytXK_ayIc1-top","from":"point-bI0wBh3Ufk-bottom","label":"Code Box","direction":"ft","selectable":true},"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left":{"to":"point-6ZopTaEaDZ-left","from":"point-hyyRZE3E8u-right","label":"call","direction":"ft","selectable":true}},"pointsMap":{"point-PSPLIYKa9J-top":{"x":805.9999797489683,"y":60,"id":"point-PSPLIYKa9J-top","direction":"top"},"point-ytXK_ayIc1-top":{"x":205.99999493724206,"y":60,"id":"point-ytXK_ayIc1-top","direction":"top"},"point-6ZopTaEaDZ-left":{"x":220,"y":605.9999898744841,"id":"point-6ZopTaEaDZ-left","direction":"left"},"point-hyyRZE3E8u-right":{"x":100,"y":606,"id":"point-hyyRZE3E8u-right","direction":"right"},"point-bI0wBh3Ufk-bottom":{"x":515.9999797489683,"y":-40,"id":"point-bI0wBh3Ufk-bottom","direction":"bottom"}},"edgesMap":{"edge-0xVBajDuvj-0xVBajDuvj-top-dcC-n0bUXU-dcC-n0bUXU-top":{"uid":"edge-0xVBajDuvj-0xVBajDuvj-top-dcC-n0bUXU-dcC-n0bUXU-top","fromNodeId":"0xVBajDuvj","fromHandleId":"0xVBajDuvj-top","toNodeId":"dcC-n0bUXU","toHandleId":"dcC-n0bUXU-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}}}}}}